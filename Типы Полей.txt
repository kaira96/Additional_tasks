Типы полей
Типы полей моделей Django

На прошлом занятии мы попробовали создать две модели и уже познакомились с типами полей, такими как CharField и DateField.

Сегодня мы бегло рассмотрим все типы полей, которые есть в Django.

﻿

AutoField -- Это автоинкрементное (то, что автоматически увеличивается) поле для хранения ID. Это поле используется редко, обычно в случаях, когда мы откуда-то копируем уже существующую базу данных и пытаемся применить в ее таблицах автоинкрементацию.

﻿

BigIntegerField -- Поле, в котором хранится 64-битное целочисленное значение, аналогично IntegerField но позволяет хранить числа от -9223372036854775808 до 9223372036854775807.

Форма будет использовать TextInput для отображения (Подробнее рассмотрим, когда будем проходить формы -- Django Forms).

﻿

BinaryField-- На практике очень редко используется. Это поле для хранения бинарных данных. Принимает значение типа bytes. Данный тип поля поддерживает ограниченное количество доступного функционала. Например, по отношению к ним (к данным в них) нельзя использовать фильтры и исключения (exclude), нельзя применять SQL-команды. Хотя, есть случаи, когда требуется сохранять, например, “сырые” данные, поступающие от сенсоров, данные в формате MessagePack. В 99% случаев решение хранить данные в BinaryField -- это ошибочное решение. Необходимо проконсультироваться с экспертом по базам данных, чтобы понять, какие могут быть последствия данного решения.

﻿

BooleanField-- Поле, хранящее булево True/False. Виджет по умолчанию для этого поля CheckboxInput (узнаем о виджетах когда будем проходить Django Forms). Значение по умолчанию для BooleanField None, если Field.default не указан.

﻿

CharField -- Строковое поле для хранения коротких текстов (фио, название города и т.п.). Для длинных текстов лучше использовать TextField. Виджет по умолчанию -- TextInput. CharFieldпринимает обязательный аргумент: max_length. В MySQL, Postgresql максимальная длина varchar составляет 255, соответственно, здесь также.

﻿

CommaSeparatedIntegerField -- Поле, хранящее целые числа разделенные запятыми. Также как в CharField, max_length является обязательным аргументом. Ниже приведен пример, в котором косвенно указано (см. на строку с числами, разделенными запятыми), что это поле базируется на CharField.

Пример:

class Foo(models.Model):

Copy
   int_list = models.CommaSeparatedIntegerField(max_length=200)
в каком нибудь другом месте
Copy
f = Foo(int_list="1,2,3,4,5")
﻿

DateField-- Дата в виде объекта datetime.datePython. Обязательные аргументы: auto_nowи auto_now_add.

auto_now -- если True, то при каждом сохранении в данное поле будет добавляться текущая дата. Полезно для фиксирования даты последнего изменения.

auto_now_add -- если True, то только при добавлении (один раз) запишется дата. Удобно использовать для фиксации даты создания записи.

﻿

DateTimeField-- Работает аналогично полю DateField. Здесь хранится дата и время, представленные объектом datetime.datetimePython. 

﻿

DecimalField -- Поле для десятичных чисел (Decimal в Python). Имеет два обязательных параметра: max_digits и decimal_places.

max_digits-- максимальное количество цифр. Например, если вы будете записывать число до 999, то будет правильно указать max_digits=3. Если хотите хранить числа до 1 миллиона (не включительно), то max_digits=6 будет правильно.

decimal_places -- количество цифр после запятой. Например, если укажем decimal_places=4, то цифра будет иметь примерно такой вид: 12.0000

Для хранения денег / финансовых данных, обычно применяют именно данного типа поле.

﻿

DurationField-- Это поле предназначено для хранения периодов времени - используется объект Python timedelta. 

Пример:

Copy
from django.db import models
class MyModel(models.Model):
    duration = models.DurationField()
где-то в другом месте проекта:
Copy
import datetime
from .models import MyModel
my_model = MyModel()
my_model.duration = datetime.timedelta(days=20, hours=10)
При составлении запросов (QuerySet, о котором мы поговорим позже) также применяем таймдельту:

Copy
durations = MyModel.objects.filter(duration=datetime.timedelta(args, *kwargs))
EmailField -- То же самое что и CharField, только рассчитан для хранения правильного email-адреса. ИспользуетEmailValidator (проверяльщик) для проверки значения. По умолчанию max_length равен 254.

﻿

FileField -- Поле для загрузки файлов на сервер.

Чтобы работал данный функционал, необходимо добавить буквально пару строк в настройки settings.py

MEDIA_ROOT = os.path.join(BASE_DIR,'media')

﻿#Здесь мы указываем, где загруженные на сайт файлы будут храниться

﻿

MEDIA_URL = '/media/'

﻿#Здесь мы указываем, какой префикс будет использоваться для получения файлов из папки, указанной в MEDIA_ROOT

Для того, чтобы загрузка файлов на сайт работал в разработческом режиме, нужно добавить следующее в основной маршрутизатор urs.py

from django.conf import settings

from django.conf.urls.static import static

в конец файла добавляем
if settings.DEBUG:

Copy
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Пример модели:

class User(models.Model):

Copy
user_name = models.CharField(max_length=100)
# наше поле загрузки
user_avatar = models.FileField()
﻿
# данный метод формирует URL, который будет использован 
# для переадресации пользователя после загрузки файла.
def get_absolute_url(self):
    return reverse('myapp:home_url')
FilePathField-- используется для того, чтобы предоставлять пользователям файлы, которые уже имеются в файловой системе компьютера. В случае сFileField, мы имеем дело с файлами, которые загружаются пользователями. ВАЖНО: не указывайте в качестве пути (то есть, значения) путь внутри вашего веб-приложения, это не безопасно. В настройках можете завести переменную FILE_PATH_FIELD_DIRECTORY, в которой могут быть разные значения в настройках для продакшен и разработческой среды. Затем, в моделях можете применить эту переменную в следующем виде:

from django.conf import settings

class Foo(models.Model):

Copy
   audio = models.FilePathField(path=settings.FILE_PATH_FIELD_DIRECTORY)
Принимает следующие параметры:

path -- (обязательное поле) путь к папке, откуда будут подаваться файлы.

match -- это необязательное поле. Здесь передается регулярное выражение, которое фильтрует файлы. Например: "foo.*.txt$", соответствует foo23.txt но отфильтрует bar.txt или foo23.gif.

recursive -- необязательное поле, которое имеет по умолчанию False. Если поставить True, то будет дано разрешение подавать файлы из вложенных папок.

allow_files-- необязательное поле. По умолчанию True. Определяет, нужно ли включить файлы, которые лежат в папке, которая указана в path.

allow_foldres-- необязательное поле. По умолчанию False. Определяет, нужно ли включать папки, которые лежат в папке, которая указана в path. Либо это поле, либо allow_files должен быть True.

﻿

FloatField -- поле для хранения числа с плавающей точкой, представленное типом float. В форме виджет по умолчанию -- NumberInput, если localize равен False, иначе TextInput. ВАЖНО: не путать с полемDecimalField.

﻿

ImageField -- Наследует все атрибуты и поведение от FileField, только при загрузке файла проверяет, является ли файл изображением. Кроме атрибутов FileFieldесть height и width. Этим атрибутам автоматически присваиваются высота и ширина при каждом сохранении:

height_field

width_field

Для работы сImageField требуется библиотека Pillow. В БД заводится в виде varchar.

Виджет форма для этого поля - ClearableFileInput.

﻿

IntegerField -- Поле для чисел. Поддерживаемые значения: -2147483648 до 2147483647. Форма использует виджет NumberInput при localize равном False, иначе TextInput.

﻿

GenericIPAddressField -- поле для IPv4 или IPv6 адресов. Параметр protocol по умолчанию имеет значение “both”, то есть, поддерживается как IPv4, так и IPv6. Параметр unpack_ipv4 по умолчанию имеет значение False, поэтому IPv4 значения будут отображаться в формате ::ffff::192.0.2.1. Чтобы IPv4-адреса отображались в виде 192.0.2.1, нам нужно в этом поле указать значение True.

﻿

NullBooleanField -- работает также, как BooleanField, но также принимает значение Null. Форма использует виджет NullBooleanSelect.

﻿

PositiveIntegerField -- Работает также, как IntegerField, только здесь отрицательные значения не допускаются. Можно использовать значение от 0 до 2147483647.

﻿

PositiveSmallIntegerField -- Работает также, как PositiveIntegerField, но принимает значения только в определенном диапазоне (зависит от типа базы данных). Для баз данных поддерживаемых Django можно использовать значения от 0 до 32767 (в MySQL 65535). Резонный вопрос: зачем использовать поле такого типа? Для производительности и уменьшения занимаемого места. В базах данных, чем меньше поле, тем больше производительности. Данное поле может подходить для данных, которые имеют фиксированное количество опций, скажем, количество страниц в книгах редко могут быть больше 32767.

﻿

SlugField--  Slug -- термин, пришедший из газетного дела. Означает короткое название-метку, которое содержит только буквы, числа, подчеркивание (underscore) или дефис. В основном используются в URL. В URL рекомендуется использовать именно slug вместо id объектов. Основывается на CharField, поэтому необходимо установить max_length, которое равно 50. Есть очень полезный параметр -- allow_unicode(по умолчанию False), который может принимать Unicode символы, например, өөөө. Для поисковой оптимизации часто рекомендуют “говорящие” URL’ы, поэтому в них лучше использовать “слаги”.

﻿

SmallIntegerField-- Работает как IntegerField, но принимает значения только в определенном диапазоне (зависит от типа базы данных). Для БД поддерживаемых Django можно использовать значения от -32768 до 32767.

﻿

TextField-- поле для хранения длинных текстов. Форма использует виджет Textarea. Когда вы значете, что CharField(который имеет ограничение в 255 символов) упирается в лимиты, то лучше использовать TextField.

﻿

TimeField -- поле, которое предназначено для хранения объектов, представленных в виде datetime.timePython. Форма использует виджет TextInput.

﻿

URLField -- поле для хранения URL. Наследуется от CharField. Виджет по умолчанию для этого поля TextInput.

﻿

UUIDField-- поле для хранения UUID (universally unique identifier). UUID позволяет уникально идентифицировать информацию без центра координации. 

Инфо из wikipedia: UUID представляет собой 16-байтный (128-битный) номер. В шестнадцатеричной системе счисления UUID выглядит как: 550e8400-e29b-41d4-a716-446655440000