Deploy Django App
Сегодня мы создадим сайт на Django. Для этого:

получим доменное имя (имя нашего сайта) на freenom.com

получим хостинг (удаленный сервер/”компьютер” на котором будет размещаться наш сайт) на digitalocean.com

подключимся к удаленному серверу создав пользователя

настроим его: настроим Nginx, настроим gunicorn, установим наш Django-проект.

﻿

Hosting / Хостинг
Нам нужно теперь получить место, где наш сайт будет размещаться. Есть такие хостинг провайдеры, такие как linode.com, digitalocean.com

Мы возьмем в аренду VPS (Virtual Private Server -- Виртуальный приватный сервер) в digitalocean.com: https://cloud.digitalocean.com/registrations/new

﻿

После входа на DigitalOcean покажет страницу с формой “Verify it’s you” и вышлет код на почту, его нужно ввести в форму.

После чего мы окажемся на главной странице с зеленой кнопкой “Create”. Нажимаем на нее и выбираем первый пункт Droplets.

﻿

﻿

После чего мы окажемся на странице выбора образа и размера виртуального сервера. Выбираем операционную систему Ubuntu 18.04, Дроплет (это маркетинговое описание виртуальной машины, которое применяется в DigitalOcean) 1GB, 25GB.

﻿

Выбираем ближайший нам датацентр. Так как интернет к нам идет через Россию из Европы, нам ближе Франкфурт:

﻿

Добавляем SSH-ключ. Для этого нажимаем на кнопку New SSH Key

﻿

… затем в форму вводим содержимое публичного SSH ключа (ниже предоставлена информация о том, где его взять)

﻿

Содержимое публичного ssh-ключа выводим с помощью команды cat:

cat ~/.ssh/id_rsa.pub

В случае, если ssh-ключ отсутствует, его нужно создать (во время создания программа попросит придумать passphrase, но это усложнит использование ключа, поэтому нужно пропустить шаг нажав Enter несколько раз. Инфо для пользователей Windows предоставлена ниже):

ssh-keygen -t rsa -b 4096 -C "some-name"

cat ~/.ssh/id_rsa.pub

Пользователям Windows я бы порекомендовал установить GitBash и 

ssh-keygen.exe -t rsa -b 4096 -C "имя моего компьютера"

cat ~/.ssh/id_rsa.pub

В поле Name можем указать название компьютера (их у нас может быть несколько).

Теперь мы можем указать название дроплета, чтобы мы знали, какой проект здесь размещается. В будущем их может быть несколько.

﻿

Все. Мы готовы создать дроплет. Нажимаем на кнопку Create

﻿

Процесс создания может занять несколько секунд.

﻿

Когда дроплет будет создан, появятся следующие показатели, в том числе IP-адрес сервера:

Вход в созданный дроплет через SSH

Для удаленного доступа в созданный сервер, мы уже добавляли SSH-ключ. Нам осталось только скопировать IP-адрес и войти в сервер под пользователем root. Формат будет такой: ssh root@ip-адрес-сервера. Здесь root -- это имя пользователя.

В моем случае, у меня вышло так:

ssh root@165.227.174.143

Далее сервер запросит, чтобы мы подтвердили свое желание продолжить соединение.

The authenticity of host '165.227.174.143 (165.227.174.143)' can't be established.

ECDSA key fingerprint is SHA256:3kp5qYxKjq0bsAVF4nBemXc2g2qecJC855iOrw9pzt0.

Are you sure you want to continue connecting (yes/no)?

Вводим yes и нажимаем Enter.

Настройка сервера
О пользователе root

Так как данный пользователь имеет все привилегии, не рекомендуется им пользоваться. Если кто-то получит root-доступ к вашему серверу, то он может украсть данные или нанести другого рода вред.

Чтобы обезопасить сервер, в первую очередь нужно создать нового пользователя.

﻿

Создание нового пользователя

Чтобы создать нового пользователя, мы должны быть залогинены как root-пользователь (то есть, подключены к серверу через ssh).

Затем, там же в терминале набираем команду adduser твое_имя (здесь нужно написать свое имя на латинице. Можно любое название придумать).

В моем случае, я набрал команду adduser dastan

Затем нужно придумать пароль (ВНИМАНИЕ: когда будете печатать пароль, вы его не увидите, но тем не менее он будет вписываться в терминал) и ответить на несколько вопросов.

Теперь нужно дать пользователю права админа. Для этого запускаем команду

usermod -aG sudo dastan

Теперь можно переключиться к пользователю dastan(введите свое имя :) ):

su - dastan

Настройка локали

Для того, чтобы наш сервер работал правильно, нам необходимо изменить настройки локали (нужно ввести в терминал построчно):

export LANGUAGE=en_US.UTF-8

export LC_ALL=en_US.UTF-8

export LANG=en_US.UTF-8

export LC_TYPE=en_US.UTF-8

sudo locale-gen en_US.UTF-8

sudo dpkg-reconfigure locales

В появившемся окне нажимаем Ок (переходы с помощью tab). Для подтверждения также нажимаем Ок.

﻿

Настройка ssh нового пользователя

Находясь на сервере под новым пользователем, создадим папку ssh:

mkdir ~/.ssh

chmod 700 ~/.ssh

Теперь создадим файл authorized_keys:

nano ~/.ssh/authorized_keys

Пока держим редактор открытым. Со своего компьютера/ноутбука (со второго терминала) копируем содержимое id_rsa.pub (который находится в своем ноутбуке, не в DigitalOcean):

cat ~/.ssh/id_rsa.pub

Выведенное на экран содержимое копируем, вставляем его в файл authorized_keys

Нажимаем Ctrl x, сохраняем изменения в файле. Теперь можно ограничить возможность внесения изменений:

chmod 600 ~/.ssh/authorized_keys

﻿

Запрет на вход с помощью пароля

Для обеспечения безопасности, рекомендуется запретить вход с помощью пароля через ssh. То есть, мы будем требовать, чтобы вход осуществлялся только по ssh-ключу. Это даст нам возможность отразить атаки ботов, которые при помощи подбора пароля будут пытаться вломиться в наш сервер.

Мы уже добавили ключ нашего локального компьютера, теперь осталось только запретить вход с помощью пароля. Открываем файл sshd_config:

sudo nano /etc/ssh/sshd_config

В открывшемся файле нужно найти пункт PasswordAuthentication, если напротив него указан yes, меняем его на no

﻿

Также запрещаем вход через root через ssh (также для обеспечения безопасности):

PermitRootLogin ставим no

﻿

В том же файле убеждаемся, что следующие параметры выглядят так:

PubkeyAuthentication yes

ChallengeResponseAuthentication no

Сохраняем файл.

Теперь нужно перезапустить сервис sshd:

sudo systemctl reload sshd

Вход с использованием нового логина

Теперь пробуем войти в удаленный сервер используя новый логин. Открываем терминал (в новом окне), набираем команду:

ssh новыйпользователь@ip-адрессервера

У меня полная команда выглядит так:

Настройка firewall’а

Для обеспечения дополнительной безопасности, необходимо настроить файрвол. Мы будем настраивать UWF-файрвол. В данном приложении, другие приложения могут иметь свои профили. Чтобы увидеть их список, набираем следующую команду:

sudo ufw app list

Теперь нам нужно добавить OpenSSH в UWF в его список разрешенных программ.

sudo ufw allow OpenSSH

Теперь активируем файрвол:

sudo ufw enable

Установка и настройка необходимого ПО

Обновим ПО сервера

sudo apt-get update

Установим необходимые ПО

sudo apt-get install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx

Настройка PostgreSQL

PostgreSQL -- это СУБД, а-ля MySQL. Рекомендуют использовать именно Postgresql.

Во время установки PostgreSQL, в Ubuntu создается пользователь postgres. Нужно переключиться в его профиль/среду:

sudo -u postgres psql

Создаем базу данных для проекта:

CREATE DATABASE simpledjango;

Также создадим пользователя базы данных проекта. simpledjangouser -- это имя пользователя, 123simpledjango123 -- пароль. Вам необходимо ввести свои данные:

CREATE USER simpledjangouser WITH PASSWORD '123simpledjango123';

Теперь мы настроим Postgres, точнее, изменим конфигурацию подключения пользователя, чтобы увеличить скорость работы БД.

По умолчанию, установим кодировку UTF-8 -- это требуется для Django. Также устанавливаем изоляцию транзакций в режим “read committed”, чтобы не происходило чтение незакомиченных транзакций. Также устанавливаем временную зону “Asia/Bishkek”:

ALTER ROLE simpledjangouser SET client_encoding TO 'utf8';

ALTER ROLE simpledjangouser SET default_transaction_isolation TO 'read committed';

ALTER ROLE simpledjangouser SET timezone TO 'Asia/Bishkek';

Теперь мы дадим все разрешения на совершение операций в БД simpledjango пользователю simpledjangouser:

GRANT ALL PRIVILEGES ON DATABASE simpledjango TO simpledjangouser;

Мы настроили базу данных для проекта. Теперь мы можем выйти из консоли СУБД:

\q

Установка pip и virtualenv

sudo -H pip3 install --upgrade pip

sudo -H pip3 install virtualenv

Если будут возникать проблемы с локалью: locale.Error: unsupported locale setting, то наберите следующие команды и попробуйте снова:

export LANGUAGE=en_US.UTF-8

export LC_ALL=en_US.UTF-8

export LANG=en_US.UTF-8

export LC_TYPE=en_US.UTF-8

sudo locale-gen en_US.UTF-8

sudo dpkg-reconfigure locales

Подготовка к поставке

Чтобы поставить наш проект на сервер, мы можем использовать различные подходы, такие как поставка с помощью bash-скрипта, с помощью средств автоматизации (например, ansible) или с помощью git.

Мы сейчас применим последний подход -- поставка с помощью git. То есть, мы отправим локальный код на github, и находясь на сервере, мы стянем его оттуда

Настройка проекта под продакшен

production-сервер -- промышленный/боевой сервер.

В редакторе (Visual code) открываем папку, где хранится наш готовый django-проект. У меня она находится в папке ~/projects/simple_django. Редактируем файл settings.py -- в переменную ALLOWED_HOSTS добавляем IP-адрес сервера, и название сайта, который мы получили на сайте freenom.com (точку перед названием ставим на случай, если мы захотим в дальнейшем добавлять субдомены, такие как primer.dastan.ga):

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.dastan.ga', '167.71.37.68']

В той же папке, где находится файл settings.py создадим новый файл settings_prod.py

В ней мы импортируем все настройки, из файла settings.py и перепишем переменную DATABASES (файл должен выглядеть примерно так. Не забудьте заменить на собственные значения):

from .settings import *

﻿

DATABASES = {

   'default': {

Copy
   'ENGINE': 'django.db.backends.postgresql_psycopg2',
   'NAME': 'simpledjango',
   'USER': 'simpledjangouser',
   'PASSWORD': '123simpledjango123',
   'HOST': 'localhost',
   'PORT': '',
   }

}

﻿

В файле wsgi.py, который находится в папке mysite меняем указанную ниже строчку:

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")

на эту:

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings_prod")

﻿

Cоздание файла с зависимостями: requirements.txt

Для того, чтобы мы (+наши коллеги) не забывали о том, какие файлы требуются для работы с проектом, мы создаем текстовый файл requirements.txt в корне проекта (то есть, рядом с manage.py, или в папке requirements), в котором мы указываем список требуемых нами пакетов. Кстати, необязательно так называть файл, можно назвать req.txt или как угодно, главное чтобы коллеги понимали, для чего этот файл.

Кроме этого, когда для разработки требуются специальные пакеты, которые на продакшене не потребуются, создают отдельный файл, например, requirements_dev.txt . И для продакшена создают отдельный файл requirements_dev.txt . Оба эти файла могут импортировать общие пакеты из файла requirements_base.txt

Об этом подходе поговорим позже, чтобы не усложнять текущее занятие.

Пока остановимся на одном файле requirements.txt, который мы разместим рядом с файлом manage.py. Так как на нашем сервере кроме Django потребуются пакеты gunicorn (wsgi-сервер) и psycopg2 (драйвер для PostgreSQL), в файл запишем следующее содержание:

Django==2.0.3

gunicorn==19.7.1

psycopg2==2.7.4

﻿

Cоздание репозитория

Внимание: при работе с коммерческими проектами, крайне желательно создавать закрытые репозитории. Такие сервисы, как bitbucket.otg, gitlab.com предоставляют бесплатные закрытые репозитории.

На github.com создадим репозиторий. Я назвал его simpledjango. Вы можете назвать как угодно.

Скопируем его ssh-адрес, чтобы добавить его в качестве удаленного репозитория. ssh-адрес моего репозитория такой: git@github.com:murat-jumashev/simpledjango.git

﻿

Добавим адрес удаленного репозитория в свой локальный компьютер

Находясь в папке проекта, мы инициализируем git (набираем в терминале):

git init

Теперь добавляем адрес репозитория:

git remote add origin git@github.com:ИМЯ-ПОЛЬЗОВАТЕЛЯ/simpledjango.git

﻿

Отправка кода на удаленный репозиторий

Создадим файл .gitignore, чтобы “всякий мусор” не попадал в наш репозиторий. Для этого, предлагаю скопировать готовый шаблон данного файла: https://raw.githubusercontent.com/jpadilla/django-project-template/master/.gitignore (Файл подготовлен добровольцами).

Открываем файл с помощью редактора nano, вставляем скопированное содержимое в открытый файл (этот файл на локальном компьютере можно открыть с помощью любого редактора):

nano .gitignore

Сохраняем файл. Теперь мы готовы отправить файл на удаленный сервер. Сначала добавим все файлы в стейджинг git:

git add -A

Теперь пишем первый коммит:

git commit -m “не копируй эту строку, так как здесь кавычки кривые”

Отправляем код с локального компьютера на github, указав при этом информацию о том, из какой ветки по умолчанию будем “стягивать”:

git push -u origin master

-u будет использоваться только один раз. При следующей отправке кода на удаленный репозиторий, необходимо набрать git push, или git push origin название_ветки

﻿

Связка продакшен сервера с git

Переходим в терминал, в котором мы работали с удаленным сервером. Если он был закрыт, то ничего страшного, нужно просто зайти еще раз :)

Итак, переходим в папку, которую мы создавали ранее:

cd ~/simpledjango

Находясь в ней, инициализируем гит-репозиторий:

git init

Теперь, находясь там же указываем удаленный гит-репозиторий. Мы уже такую же операцию делали на локальном компьютере. Помните для чего?

Итак, добавляем адрес репо:

git remote add origin https://github.com/ИМЯ-ПОЛЬЗОВАТЕЛЯ/simpledjango.git

Забираем код из удаленного репозитория

git pull origin master

Делаем так, чтобы ветка master удаленного репозитория (в предыдущем шаге мы его назвали origin) соответствовала локальной ветке master:

git branch --set-upstream-to=origin/master master

﻿

Настройка проекта в продакшен среде

Находясь в домашней папке, создаем папку проекта:

mkdir simpledjango

… и перейдём в нее:

cd simpledjango

Находясь внутри папки проекта (simpledjango), создадим виртуальное окружение для него:

virtualenv env -p python3

Если выкинет ошибку , то используйте параметр , которому мы привыкли 

python3 -m venv env

Теперь мы можем активировать ее:

source env/bin/activate

Набираем команду ls и убеждаемся, что наша папка выглядит примерно так:

Устанавливаем необходимые пакеты, список которых указан в файле requirements.txt:

pip install -r requirements.txt

Теперь просим нашего фаервола разрешить “стучаться” в порт 8000:

sudo ufw allow 8000

Теперь попробуем запустить проект с помощью встроенного в Django сервера:

python manage.py runserver 0.0.0.0:8000

Теперь в браузере попробуем войти в наш сайт, указав IP-адрес:

http://ip-адрес-сервера:8000

В браузере мы должны увидеть наш сайт.

Продолжим процесс разворачивания сервера на продакшене. Необходимо остановить работу разработческого сервера: в терминале, где мы запускали сервер, нажмите Ctrl + x

На продакшене мы используем базу данных PostgreSQL. Для этого в папке mysite мы создали файл настроек settings_prod. Чтобы применение миграций и создание суперпользователя происходило в базе данных, указанной в файле настроек, мы должны явно указать эти настройки (обратите внимание на параметр --settings):

python manage.py migrate --settings=mysite.settings_prod

python manage.py createsuperuser --settings=mysite.settings_prod

Ранее в настройках Django мы указывали переменную STATIC_ROOT. Эта папка создается при наборе команды, которая указана ниже. Эта папка понадобится для того, чтобы с нее NGINX “подавал” статичные файлы:

python manage.py collectstatic

 Теперь нам осталось проверить работу Gunicorn.

﻿

Настройка Gunicorn

Если вы находитесь вне папки проекта, нужно перейти в нее:

cd ~/simpledjango

Если виртуальное окружение не активировано, нужно активировать его:

source env/bin/activate

Теперь, находясь рядом с файлом manage.py мы можем запустить wsgi-сервер gunicorn для проверки:

gunicorn --bind 0.0.0.0:8000 mysite.wsgi

Конечно же вы заметили аргумент mysite.wsgi -- прописав его мы указали точку входа в проект. А как вы помните, в файле wsgi.py мы указывали какие настройки использовать.

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings_prod")

То есть, мы говорим wsgi-серверу, чтобы он использовал настройки settings_prod, который находится в папке mysite.

Кроме этого, нужно понимать, что gunicorn не занимается подачей статичных файлов, поэтому мы получили сайт без применения стилей. Статичные файлы будет подавать NGINX.

Мы убедились, что Gunicorn работает. Чтобы остановить его, нажимаем Ctrl + c

﻿

Конфигурационные файлы под версионным контролем

WSGI-сервер gunicorn, http-сервер NGINX настраиваются с помощью создания новых конфигурационных файлов. Их необходимо держать под версионным контролем, чтобы мы знали когда, кем и в каких целях в них вносятся изменения.

Для этого, в папке проекта (в моем случае simpledjango) создадим папку configs (можно как угодно назвать, главное чтобы вы сами не запутались).

﻿

Настройка мониторинга WSGI-сервера

Мониторингом WSGI-сервера gunicorn будет заниматься systemd -- это программное обеспечение Linux, которое управляет фоновыми задачами и процессами сервисов и систем. Сейчас мы создадим конфигурационные файлы для управления сервисом gunicorn и сокетом gunicorn.

На своем локальном компьютере перейдем в папку configs (см. предыдущий пункт). Там мы создадим сокет-файл с названием gunicorn_simpledjango.socket Этот сокет будет контролироваться со стороны systemd.

Содержимое будет следующим:

[Unit]

Description=gunicorn socket for simpledjango project

﻿

[Socket]

ListenStream=/run/gunicorn/simpledjango_socket

﻿

[Install]

WantedBy=sockets.target

systemd будет слушать этот сокет и будет автоматически запускать gunicorn, когда придет запрос от пользователей. Этот сокет будет использовать сервис gunicorn через параметр --bind unix:/run/gunicorn/simpledjango_socket (параметр будет указан в сервис-файле, который создадим в следующем шаге).

Немного о пунктах в файле:

Description -- как говорит само название, это описание сокета.

ListenStream -- systemd требует, чтобы здесь указывался адрес сокета (“розетки”), которую он будет мониторить. В нашем случае, это будет сокет под названием simpledjango_socket, который находится в папке /run/gunicorn .

WantedBy=sockets.target -- указывает на то, что текущий сокет должен быть запущен после загрузки машины.

Мы еще не закончили с данным файлом. Вернемся к нему позже.

Теперь нам нужно создать файл настройки сервиса.

В папке configs создадим файл gunicorn_simpledjango.service 

[Unit]

Description=gunicorn daemon for simpledjango project

Requires=gunicorn_simpledjango.socket

After=network.target

﻿

[Service]

PermissionsStartOnly=True

User=dastan

Group=www-data

RuntimeDirectory=gunicorn

RuntimeDirectoryMode=0775

PIDFile=/run/gunicorn/pid

WorkingDirectory=/home/dastan/simpledjango

ExecStart=/home/dastan/simpledjango/env/bin/gunicorn \

Copy
﻿
﻿
Copy
      --access-logfile /home/dastan/simpledjango/logs/access.log \
      --error-logfile /home/dastan/simpledjango/logs/error.log \
      --pid /run/gunicorn/pid   \
      --env DJANGO_SETTINGS_MODULE=mysite.settings_prod \
      --workers 3 \
      --bind unix:/run/gunicorn/simpledjango_socket mysite.wsgi:application
Copy
﻿
﻿
ExecReload=/bin/kill -s HUP $MAINPID

ExecStop=/bin/kill -s TERM $MAINPID

PrivateTmp=true

﻿

[Install]

WantedBy=multi-user.target

﻿

Обратите внимание на выделенные красным цветом области. В них вам необходимо указать свои данные.

К данному файлу также вернемся позже.

Настройка NGINX

В папке configs (внутри папки проекта) создадим еще один файл: simpledjango_nginx.conf

В нем будет следующее содержание:

﻿

﻿

Copy
server {
#redirect www to non-www   
server_name www.dastan.ga;
   return 301 $scheme://dastan.ga$request_uri;
}
﻿
server {
   server_name dastan.ga 167.71.37.68;
   charset utf-8;
   client_max_body_size 15M;
﻿
location = /favicon.ico { access_log off; log_not_found off; }
location /static {
    alias /home/dastan/simpledjango/static;
   expires 30d;
   access_log off;
   add_header Cache-Control "public";
}
﻿
location /media {
    alias /home/dastan/simpledjango/media;
}
Copy
#Finally, send all non-media requests to the Django server.
﻿
location / {
    proxy_set_header Host $host;
    proxy_pass http://unix:/run/gunicorn/simpledjango_socket;
}
}

Здесь также обратите внимание на выделенные красным цветом области. В них нужно указать свои данные. 

Отправка кода на удаленный сервер

Создали конфигурационные файлы. Теперь их нужно добавить в git и отправить на репозиторий:

git add -A

git commit -m “Add configs НЕ КОПИРУЙ ЭТУ СТРОКУ, ЗДЕСЬ КАВЫЧКИ КРИВЫЕ”

git push

Теперь подключаемся к удаленному серверу и получаем оттуда дополнения. То есть, в терминале, подключившись к серверу, перейдя в папку проекта (cd simpledjango), стягиваем дополненный проект.

Если вдруг забыли указать адрес удаленного сервера, сначала добавим его

git remote add origin https://github.com/ИМЯ-ПОЛЬЗОВАТЕЛЯ/simpledjango.git .

… и получим код:

git pull origin master

Прочие операции

Продолжаем настраивать удаленный сервер. Мы ранее просили ufw открыть порт 8000. Мы уже потестировали, теперь попросим его закрыть.

sudo ufw delete allow 8000

Теперь попросим разрешить открыть доступ к Nginx извне

sudo ufw allow 'Nginx Full'

Создание папки для логов

На удаленном сервере в папке проекта необходимо создать папку logs (иначе gunicorn не запустится):

cd ~/simpledjango

mkdir logs

cd logs

… и создадим файлы access.log и error.log:

touch access.log

touch error.log

Создание символической ссылки

Мы все еще находимся внутри удаленного сервера :)

По идее, файл simpledjango_nginx.conf должен был находиться в папке /etc/nginx/sites-available оттуда мы должны были создать символическую ссылку в папке /etc/nginx/sites-enabled  Но для того, чтобы держать файл под версионным контролем, мы держим файл внутри папки проекта. Сейчас мы создадим символическую ссылку на файл, после чего он будет “притворяться”, что он находится внутри папки /etc/nginx/sites-enabled. Следующую команду нужно набирать в одну строчку:

sudo ln -s /home/ТВОЕ_ИМЯ/simpledjango/configs/simpledjango_nginx.conf /etc/nginx/sites-enabled/simpledjango_nginx.conf

Набрав ls -la в папке /etc/nginx/sites-enabled мы можем увидеть созданную ссылку:

Активация сервиса

Активируем systemd сервисы, так чтобы они запускались даже после перезапуска сервера (компьютера):

sudo systemctl enable /home/ТВОЕ_ИМЯ/simpledjango/configs/gunicorn_simpledjango.socket

sudo systemctl enable /home/ТВОЕ_ИМЯ/simpledjango/configs/gunicorn_simpledjango.service

sudo systemctl enable nginx.service

Запустим сервисы:

sudo systemctl start gunicorn_simpledjango.service

sudo systemctl start gunicorn_simpledjango.socket

sudo systemctl start nginx

Проверим, все ли запустилось:

Открываем наш сайт (пока IP-адрес; здесь дан мой IP-адрес): http://165.227.174.143

Если все ок, то открывается наш сайт.

Если нет, то пробуем дебажить (отлавливать ошибки). См. далее.

Отладка

Если не запустился сервер, еще раз проверим настройки сервера проекта, который у меня запустился: https://github.com/Alymbekov/simpledjango/tree/master/configs

Далее, остановим сервисы:

sudo systemctl stop gunicorn_simpledjango.service

sudo systemctl stop gunicorn_simpledjango.socket

sudo systemctl stop nginx

Далее, проверяем, нет ли папки gunicorn в папке /run:

ls -la /run

В случае, если она есть:

… то удаляем ее:

cd /run

sudo rm -rf gunicorn

… и снова запустим сервисы:

sudo systemctl start gunicorn_simpledjango.service

sudo systemctl start gunicorn_simpledjango.socket

sudo systemctl start nginx

Нам нужно проверить состояние сервисов. Для этого набираем следующие команды:

systemctl status gunicorn_simpledjango.service

Мы должны увидеть зеленый кружок и 1 главный, 3 подчиненных процесса:

Если вместо зеленого круга мы видим красный, то сервис, очевидно не работает. Причин может быть несколько:

Папка logs не была создана

Файлы access.log и error.log не были созданы

Неверно указаны пути в файле gunicorn_simpledjango.service или gunicorn_simpledjango.socket

После внесения изменений, попробуйте снова выполнить команды, перечисленные выше.

Проверим состояние сервиса gunicorn_simpledjango.socket:

systemctl status gunicorn_simpledjango.socket

Здесь также мы должны увидеть зеленый круг. В пункте Listen: мы видим местонахождение сокета, который слушает данный сервис.

Проверим наличие сокета в вышеуказанной папке:

ls /run/gunicorn

Если в папке отсутствует socket файл, то скорее всего в файле gunicorn_simpledjango.service допущена ошибка. Проверьте каждую строчку, в первую очередь проверьте правильность написания имени пользователя в пункте User:

User=dastan

﻿

Привязка доменного имени

Заходим в личный кабинет http://digitaocean.com

Переходим во вкладку Networking

﻿

﻿

Нужно ввести название домена и нажать на кнопку Add Domain. Я ввел murat.ga (который я получил в сервиса freenom.com

﻿

Чтобы настроить доменное имя далее (настройки DNS), нажимаем на созданную запись (см. изображение выше).

﻿

Настройка записи A

В поле HOSTNAME вводим @, в поле WILL DIRECT TO выбираем тот сервер (хост), который мы создали (и который мы настроили). В будущем их может быть больше. В поле TTL (инфо здесь) ничего не меняем. Нажимаем Create Record.

﻿

Теперь нужно создать запись для хоста с префиксом www. В поле HOSTNAME вводим www, в поле WILL DIRECT TO выбираем наш сервер. Нажимаем Create Record.

﻿

Настройка записи AAAA

Для настройки AAAA требуется включить IPV6 на сервере. Если при создании дроплета вы не выбирали опцию IPV6, то мы идем во вкладку Droplets, там выбираем наш дроплет, в нем нажимаем на кнопку “Enable now” напротив ipv6:

﻿

После этого необходимо выключить сервер, нажав на кнопку Power Off. После выключения появится кнопка Enable. Нажимаем на нее.

﻿

… и ждем, пока не появится что-то в этом роде:

﻿

Теперь, после того, как вы включили сервер, снова заходим во вкладку Networking, выбираем доменное имя, переходим во вкладку AAAA, делаем то же самое, что делали на предыдущем шаге (не сразу появится).

﻿

Прописка name-серверов в личном кабинете провайдера доменного имени -- freenom.com

У digital ocean следующие name-сервера:

ns1.digitalocean.com

ns2.digitalocean.com

ns3.digitalocean.com

Их нужно прописать в интерфейсе провайдера. Заходим в личный кабинет, переходим в раздел My Domains, выбираем пункт 

Выбираем вкладку “Management Tools” (см. ниже) 

﻿

В нем выбираем Nameservers (см. изображение ниже)

﻿

Далее отмечаем пункт “Use custom nameservers (enter below):

﻿

Вводим следующие записи в первые 3 строки

ns1.digitalocean.com

ns2.digitalocean.com

ns3.digitalocean.com

… и нажимаем на кнопку Change Nameservers.

Таким образом, мы сообщаем всему миру о том, на каких серверах искать полученный нами домен и IP-адрес, который к нему привязан. Поиск будет производиться на серверах Digital Ocean.

После того, как мы привяжем наше доменное имя к IP-адресу/серверу, должно пройти около суток, чтобы все root-сервера (корневые сервера) во всем мире знали о том, к какому IP-адресу привязан домен.