Docker
What is Docker?
Docker is an open platform for developing, shipping & running distributed applications, whether on laptops, data center VMs or cloud. Docker provides the ability to package and run an application in a loosely isolated environment called a container. The Docker Platform consists of multiple product/tools, including the Docker Engine, Images, Containers, and Hub, among others.

﻿

﻿

The Docker platform is the only container platform to build, secure and manage the widest array of applications from development to production both on premises and in the cloud.

﻿

Container vs VM
﻿



﻿

How it works
﻿

﻿



Namespaces
Docker makes use of kernel namespaces to provide the isolated workspace called the container. When you run a container, Docker creates a set of namespaces for that container. These namespaces provide a layer of isolation. Each aspect of a container runs in a separate namespace and its access is limited to that namespace.

Docker Engine uses the following namespaces on Linux:

PID namespace for process isolation.
NET namespace for managing network interfaces.
IPC namespace for managing access to IPC resources.
MNT namespace for managing filesystem mount points.
UTS namespace for isolating kernel and version identifiers.
﻿

Cgroups
Docker also makes use of kernel control groups for resource allocation and isolation. A cgroup limits an application to a specific set of resources. Control groups allow Docker Engine to share available hardware resources to containers and optionally enforce limits and constraints.

Docker Engine uses the following cgroups:

Memory cgroup for managing accounting, limits and notifications.
HugeTBL cgroup for accounting usage of huge pages by process group.
CPU group for managing user / system CPU time and usage.
CPUSet cgroup for binding a group to specific CPU. Useful for real time applications and NUMA systems with localized memory per CPU.
BlkIO cgroup for measuring & limiting amount of blckIO by group.
net_cls and net_prio cgroup for tagging the traffic control.
Devices cgroup for reading / writing access devices.
Freezer cgroup for freezing a group. Useful for cluster batch scheduling, process migration and debugging without affecting prtrace.
﻿

Union File Systems
Union file systems operate by creating layers, making them very lightweight and fast. Docker Engine uses UnionFS to provide the building blocks for containers. Docker Engine can use multiple UnionFS variants, including AUFS, btrfs, vfs, and devicemapper.





Докер
Что такое докер?
Docker - это открытая платформа для разработки, доставки и запуска распределенных приложений на ноутбуках, виртуальных машинах центра обработки данных или в облаке. Docker предоставляет возможность упаковывать и запускать приложение в слабо изолированной среде, называемой контейнером. Платформа Docker состоит из нескольких продуктов / инструментов, в том числе Docker Engine, изображений, контейнеров и Hub.

Взаимодействие с другими людьми

Взаимодействие с другими людьми

Платформа Docker - единственная контейнерная платформа для создания, защиты и управления широчайшим спектром приложений от разработки до производства как в локальной среде, так и в облаке.

Взаимодействие с другими людьми

Контейнер против ВМ
Взаимодействие с другими людьми



Взаимодействие с другими людьми

Как это работает
Взаимодействие с другими людьми

Взаимодействие с другими людьми



Пространства имён
Docker использует пространства имен ядра для предоставления изолированного рабочего пространства, называемого контейнером. Когда вы запускаете контейнер, Docker создает для этого контейнера набор пространств имен. Эти пространства имен обеспечивают уровень изоляции. Каждый аспект контейнера работает в отдельном пространстве имен, и его доступ ограничен этим пространством имен.

Docker Engine использует следующие пространства имен в Linux:

Пространство имен PID для изоляции процесса.
NET для управления сетевыми интерфейсами.
Пространство имен IPC для управления доступом к ресурсам IPC.
MNT пространство имен для управления точками монтирования файловой системы.
Пространство имен UTS для изоляции идентификаторов ядра и версии.
Взаимодействие с другими людьми

Cgroups
Docker также использует группы управления ядром для выделения и изоляции ресурсов. Cgroup ограничивает приложение определенным набором ресурсов. Группы управления позволяют Docker Engine делиться доступными аппаратными ресурсами с контейнерами и, при необходимости, применять ограничения и ограничения.

Docker Engine использует следующие контрольные группы:

Группа памяти для управления учетными записями, ограничениями и уведомлениями.
HugeTBL cgroup для учета использования огромных страниц по группам процессов.
Группа ЦП для управления временем ЦП пользователя / системы и его использованием.
CPUSet cgroup для привязки группы к определенному процессору. Полезно для приложений реального времени и систем NUMA с локализованной памятью на процессор.
BlkIO cgroup для измерения и ограничения количества blckIO по группе.
net_cls и net_prio cgroup для маркировки контроля трафика.
Группа устройств для чтения / записи устройств доступа.
Freezer cgroup для замораживания группы. Полезно для пакетного планирования кластера, миграции процессов и отладки без влияния на prtrace.
Взаимодействие с другими людьми

Union File Systems
Файловые системы Union работают путем создания слоев, что делает их очень легкими и быстрыми. Docker Engine использует UnionFS для создания строительных блоков для контейнеров. Docker Engine может использовать несколько вариантов UnionFS, включая AUFS, btrfs, vfs и devicemapper.
© 2021 GitHub,
